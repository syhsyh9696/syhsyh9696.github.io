<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>BronyS' Blog</title>
    <description>CS / Ruby / OSU player</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 31 Mar 2017 23:20:29 +0800</pubDate>
    <lastBuildDate>Fri, 31 Mar 2017 23:20:29 +0800</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Emacs 配置文件格式化</title>
        <description>&lt;p&gt;&lt;strong&gt;纯属吃饱了撑的&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;反正那个爬虫一时半会做不出来，还是来折腾一下emacs吧。 要说最近看什么不爽，就是看那个长长的&lt;strong&gt;&lt;em&gt;init.el&lt;/em&gt;&lt;/strong&gt;非常的不爽， 里面堆满了各种&lt;/p&gt; &lt;ul&gt; &lt;li&gt;自动生成的custom代码&lt;/li&gt; &lt;li&gt;package源配置代码&lt;/li&gt; &lt;li&gt;各种mode开启关闭&lt;/li&gt; &lt;li&gt;各种键位的自定义&lt;/li&gt; &lt;li&gt;ui的自定义&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;够了！邪魔退散！开始拆分。&lt;/p&gt; &lt;p&gt;长长的配置文件重新分为几类保存在 ~/.emacs.d/lisp，&lt;/p&gt; &lt;ul&gt; &lt;li&gt;custom.el 主要保存自动生成的custom代码&lt;/li&gt; &lt;li&gt;init-better-defaults.el 模式的开关&lt;/li&gt; &lt;li&gt;init-keybindings.el 键位设置&lt;/li&gt; &lt;li&gt;init-org.el org模式相关配置&lt;/li&gt; &lt;li&gt;init-packages.el package源配置和自动安装函数定义&lt;/li&gt; &lt;li&gt;init-ui.el 工具栏或者主题设置&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;好了拆分完成，下一步就是在init.el中引用调用了。 首先指定你的配置文件保存在哪个位置，emacs会找到那个文件夹 并索引文件，这一步用 &lt;strong&gt;&lt;em&gt;(add-to-list load-path “FILL_IN”)&lt;/em&gt;&lt;/strong&gt;搞定。 之后就是require相关设置增加相应的功能，不过这一步一定不要包括 &lt;strong&gt;&lt;em&gt;custom.el&lt;/em&gt;&lt;/strong&gt;文件，要单独处理这个大麻烦。&lt;/p&gt; &lt;p&gt;最后就是load custom variable，需要set一个变量， 用&lt;strong&gt;&lt;em&gt;(setq custom-file)&lt;/em&gt;&lt;/strong&gt;搞定并在最后load一下搞定。&lt;/p&gt; &lt;p&gt;具体的实现方法&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;package-initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'load-path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/lisp/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; Set F2 to open init.el &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defun&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open-my-init-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find-file&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~/.emacs.d/init.el&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;;; add more personal func &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span...</description>
        <pubDate>Fri, 31 Mar 2017 22:56:28 +0800</pubDate>
        <link>http://localhost:4000/emacs-config-file-format/</link>
        <guid isPermaLink="true">http://localhost:4000/emacs-config-file-format/</guid>
        
        <category>Daily</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>Ruby Block</title>
        <description>&lt;p&gt;&lt;strong&gt;Ruby Blocks&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;代码块在Ruby中也是可以传递的，这很tricky，比如&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;当然可以询问当前的方法调用是否包含块，可以通过方法Kernel#block_given?方法得到&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;代码块是闭包&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;代码块可以偷偷的吧变量带出原来的作用域。 可以运行的代码由两部分组成:代码和一组绑定，绑定在代码块结束的时候就消失了， 基于这种特性，代码块被称为闭包，就是说，代码块可以获取局部绑定并一直带着他们。&lt;/p&gt; &lt;p&gt;跟Java那些语言不同的是，Ruby并没有内部作用域(inner scope)或者外部作用域(outer scope) 这种概念，Ruby的作用域并不是嵌套的而是截然分开的，一旦进入到一个新的作用域中， 整组绑定都会被替换掉，比如&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClassnn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;local_variables&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [:v2]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span...</description>
        <pubDate>Mon, 27 Mar 2017 22:46:50 +0800</pubDate>
        <link>http://localhost:4000/ruby-block/</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-block/</guid>
        
        <category>Ruby</category>
        
        
        <category>Ruby notes</category>
        
      </item>
    
      <item>
        <title>Ruby bsearch</title>
        <description>&lt;p&gt;&lt;strong&gt;Ruby Array#bsearch&lt;/strong&gt;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;最近遇到了很多查询查找的问题，各个方法的效率又天差地别。 Ruby Module#enumerable 提供了很多方法，比如 Array#select Array#reject Array#find Array#bsearch&lt;/p&gt; &lt;p&gt;我看老师天天讲分治法，自然就经常使用典型的Array#bsearch方法了&lt;/p&gt; &lt;p&gt;相比于Array#find要一直找到整个Array的末尾不同， bsearch 方法就相当的快了，复杂度O(log n)，具体实现方法可以看 Ben Lewis’s &lt;a href=&quot;https://fluxusfrequency.github.io/blog/2014/01/31/building-a-binary-search/&quot;&gt;Blog&lt;/a&gt;&lt;/p&gt; &lt;p&gt;也可以自己扔到一个脚本里面看看他们之间的差异&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'benchmark'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:bsearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bsearch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;...</description>
        <pubDate>Fri, 17 Mar 2017 15:01:59 +0800</pubDate>
        <link>http://localhost:4000/ruby-bsearch/</link>
        <guid isPermaLink="true">http://localhost:4000/ruby-bsearch/</guid>
        
        <category>Ruby</category>
        
        
        <category>Ruby notes</category>
        
      </item>
    
      <item>
        <title>Emacs with GnuTLS</title>
        <description>&lt;p&gt;&lt;strong&gt;Emacs换源产生的依赖问题&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Gnu software在Windows上总是有一些缺少依赖的问题， 今天在给Emacs切换Emacs-China的Melpa源的时候有错误产生 “GnuTLS library is not found”&lt;/p&gt; &lt;p&gt;然后查了查，原来是因为Emacs从24版本以后开始直接允许使用GnuTLS库来直接创建TLS网络链接， 而不是调用其他的Terminal app。要触发这个问题的话，也是有一定的条件的。 原来的源的配置我是直接扔到了&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;custom-set-variables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;这样是没有任何问题的，只有我使用了新的init-packages.el之后这个问题才会出现 (源配置移动到packages-list到这个文件)&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emacs-major-version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'package-archives&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gnu&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://elpa.emacs-china.org/gnu/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'package-archives&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;melpa&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://elpa.emacs-china.org/melpa/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add-to-list&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;'package-archives&lt;/span&gt;&lt;span...</description>
        <pubDate>Tue, 14 Mar 2017 13:19:03 +0800</pubDate>
        <link>http://localhost:4000/emacs-with-gnutls/</link>
        <guid isPermaLink="true">http://localhost:4000/emacs-with-gnutls/</guid>
        
        <category>Daily</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>Ruby Array#inject#reduce</title>
        <description>&lt;h2 id=&quot;arrayinjectreduce其实是一回事&quot;&gt;&lt;strong&gt;Array#inject#reduce其实是一回事&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;其实reduce是一个inject的别名，两者的能实现一样的功能，但我觉得reduce更好理解一些。&lt;/p&gt; &lt;p&gt;这两个方法在&lt;a href=&quot;https://leetcode.com/problems/letter-combinations-of-a-phone-number/&quot;&gt;Leetcode 17&lt;/a&gt; 里可以用到，具体的实现方法(我更喜欢reduce这个叫法)&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# encoding:utf-8 &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# @param {String} digits &lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# @return {String[]} &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;letter_combinations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'g'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'j'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;...</description>
        <pubDate>Fri, 10 Mar 2017 09:00:00 +0800</pubDate>
        <link>http://localhost:4000/Ruby-Array-inject-reduce/</link>
        <guid isPermaLink="true">http://localhost:4000/Ruby-Array-inject-reduce/</guid>
        
        <category>Ruby</category>
        
        
        <category>Ruby notes</category>
        
      </item>
    
      <item>
        <title>原来2017年已经过去这么多了</title>
        <description>&lt;h2 id=&quot;又是新一年&quot;&gt;&lt;strong&gt;又是新一年&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;话说从去年十二月份写过一次之后，好像一个月我都没在打开jekyll生成一片新博客，
又违约了 逃ε=ε=ε=┏(゜ロ゜;)┛&lt;/p&gt;

&lt;p&gt;也是我这段时间实在是没有什么时间写，整本的单词书还有一堆练习等我去啃，摸摸电脑都算奢侈了。
也就这两天稍微轻松那么一点，写了个信息推送的机器人&lt;a href=&quot;https://telegram.me/ujnblogbot&quot;&gt;@ujnblogbot&lt;/a&gt;,
基本就是如果我这些好朋友博客如果有了更新的话，就会在上面给我发一条消息。
整个思路上，是《Ruby Metaprogramming》给了我很大的启发。想用这个服务也很简单啦，
添加一下然后对它发一条’/start’就可以了。&lt;/p&gt;

&lt;p&gt;对了，自从我熟练的使用了HHKB之后，简直就是行云流水一般，爽到生活不能自理，
不过那个Backspace确实很奇葩，我现在笔电上的键盘是彻彻底底不会用了，也是很绝望啊！&lt;/p&gt;

&lt;p&gt;要说还有什么别的成绩的话哈哈哈我又在装逼的道路上前进了好远。有一天早上突发奇想在CU海淘了一台
HP Gen8服务器，等到了我就可以给我的大姐姐们造一个大别墅(NAS)了哈哈哈。
放心，等到了我一定会照一大堆照片装逼的。&lt;/p&gt;

&lt;p&gt;要说最近我还干了什么的话，就是迷上了新垣结衣，整天看日本电视剧。
不过新垣结衣真的很耐看啊！那个真野惠里菜也好萌啊！感觉要把她俩加到大别墅里好好保存了哈哈哈。&lt;/p&gt;

&lt;p&gt;话说HHKB的感受我还没写，Emacs也又一大堆东西需要整理，Ruby还要看好多书，
感觉身体被掏空。这个假还不如不放！&lt;/p&gt;

&lt;p&gt;所以还是脚踏实地一步一步来吧，就这样，万一年前我不再写博客的话，就预祝你&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;鸡年大吉吧&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/New-year/</link>
        <guid isPermaLink="true">http://localhost:4000/New-year/</guid>
        
        <category>Daily</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>我最后还是选择了HHKB</title>
        <description>&lt;h2 id=&quot;选择hhkb&quot;&gt;&lt;strong&gt;选择HHKB&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;前几天一冲动，在日本亚马逊上购买了HHKB的黑色，
盼星星盼月亮我终于把HHKB盼来了。&lt;/p&gt;

&lt;p&gt;Nippon境内的&lt;strong&gt;&lt;em&gt;佐川急便&lt;/em&gt;&lt;/strong&gt;还是非常快速的，毕竟国家就那么大，
但是&lt;strong&gt;&lt;em&gt;Japan Post&lt;/em&gt;&lt;/strong&gt;的速度就不尽如人意了，当然最慢的还是&lt;strong&gt;&lt;em&gt;EMS&lt;/em&gt;&lt;/strong&gt;。
转运选的&lt;strong&gt;&lt;em&gt;Jshopppers&lt;/em&gt;&lt;/strong&gt;，因为我之前就在他们家注册过，
所以就非常的方便，就不用再重新认证我的个人信息了。&lt;/p&gt;

&lt;p&gt;话说从日本寄到青岛的速度，不知道比青岛到济南的速度快到哪里去了。
而且这个键盘在济南海关和青岛海关各接受了一次查验，居然都没有被税，
去查了一下完税价格发现键盘才80元，原来他们都不屑与收这笔钱，
真是赚到了。&lt;/p&gt;

&lt;p&gt;反正今天第一天用，我觉得这个键盘令人非常的满意，
回弹比红轴略微强那么一点，如果之前是红轴或者青轴的用户，
应该都会很快适应吧。&lt;/p&gt;

&lt;p&gt;最让我开心的事情是，包装内附送了一张HHKB 20周年纪念贴纸，
有点特典的感觉，我准备把它贴在我的电脑上，装逼力Max。&lt;/p&gt;

&lt;p&gt;最近一直都在复习考试科目，我再体验几天，详细体验一下这个键盘，
再回来扯淡把。&lt;/p&gt;

&lt;p&gt;话说这一段时间我好像很久没有看Rails和Ruby元编程了。&lt;/p&gt;
</description>
        <pubDate>Sat, 31 Dec 2016 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/hhkb-keyboard/</link>
        <guid isPermaLink="true">http://localhost:4000/hhkb-keyboard/</guid>
        
        <category>Daily</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>历史的进程 - Emacs配置初篇</title>
        <description>&lt;h2 id=&quot;emacs的包管理&quot;&gt;&lt;strong&gt;Emacs的包管理&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;一位一些大家都知道的原因， Emacs的源有一些是不能用的，
如果是在Linux下的话，用proxychains还是可以很方便的，
但是如果是Emacs for windows，这个问题不知道该怎么解决了，除非你用WSL。
所以没办法，换别的源吧&lt;/p&gt;

&lt;p&gt;所谓的包管理，在Emacs里面叫做package mode，
想查看自己目前的packages-list的话，使用组合键 M+x list-packages 可以查看自己现在可用的包
在这个buffer里可以使用C-h m了解更多的操作帮助。&lt;/p&gt;

&lt;p&gt;这个packages-list是从网络上下载下来的，这个下载地址叫做Package Archives，
使用组合键 C-h v package-archives 可以查看这个变量值，默认情况下只有一个源，导致包不是很多。&lt;/p&gt;

&lt;p&gt;为了实现更多的扩展功能我还是要添加更多的Package源，
利用组合键 M-x customize-variable RET package-archives 可以进入到一个新的buffer，
就可以在这个里面添加常用的源了，一般来说，中科大的和清华大学的源都是很好用的，
不过还有一个&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;(“popkit” . “http://elpa.popkit.org/packages/”)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个源有的时候也是非常的好用，是以为大陆的Emacs用户个人维护的，有的时候也是非常的快。&lt;/p&gt;

&lt;h2 id=&quot;emacs-theme&quot;&gt;&lt;strong&gt;Emacs Theme&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;在用了几天自带的主题之后，我实在是被自带的mode-line丑的不要不要的，
找了好几天终于发现了一个很对我口味的主题&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Emacs-Dracula https://draculatheme.com/emacs/&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这个主题配色非常的好看，主要是mode-line不是那么反人类了，写起东西来也变得非常舒服了。&lt;/p&gt;

&lt;p&gt;在我的调教下，Emacs逐渐变得越来越好用了。&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 16:00:00 +0800</pubDate>
        <link>http://localhost:4000/Emacs-chapter_2/</link>
        <guid isPermaLink="true">http://localhost:4000/Emacs-chapter_2/</guid>
        
        <category>Daily</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>12月的侃山街</title>
        <description>&lt;h2 id=&quot;osu触盘计划-中期报告&quot;&gt;&lt;strong&gt;OSU!触盘计划-中期报告&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;本来我和&lt;a href=&quot;https://github.com/CocherZhang&quot;&gt;&lt;strong&gt;&lt;em&gt;@Cocher老贼&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;
玩OSU!都是用键盘鼠标的，没想到他居然背叛了组织，并且指法从’标准指法’换成了’兰花指法’,
我和他印PCB做触盘的计划(JiJi盘 project)就彻底泡汤了。&lt;/p&gt;

&lt;p&gt;于是找了一个废旧鼠标的PCB板，加上从淘宝买的cherry轴和试轴器，一个硬盘托架，制作成了一个触盘，
没想到还不错
&lt;img src=&quot;http://7xqbr4.com1.z0.glb.clouddn.com/photo_2016-12-15_22-50-37.jpg&quot; alt=&quot;OSU! Keyboard&quot; /&gt;
就是这个玩意，没错键帽(来自宿舍最凶的男人的C87)就是故意装反的。&lt;/p&gt;

&lt;p&gt;我这个触盘成功通过了我的十万次打击测试，而且稳定性非常感人，触发非常的灵敏，这样就不用天天背着我的键盘了。
话说我那个87键Filco Ninja Majestouch-2真的是沉的我不想再说什么了，
真的比我的X1-Carbon+充电器还沉……&lt;/p&gt;

&lt;p&gt;而且有了这个触盘之后名次已经开始涨上来了，原来玩不好就是怪外设红红火火
&lt;img src=&quot;http://7xqbr4.com1.z0.glb.clouddn.com/2016-12-15-Performance.jpg&quot; alt=&quot;Performance&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以后要是OSU!又厉害的话我肯定会在tag-OSU!更新的。&lt;/p&gt;

&lt;h2 id=&quot;新键盘计划&quot;&gt;&lt;strong&gt;新键盘计划&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;不过最近可能玩的时间就会少很多了，马上要到考试周了，年前还要听母上大人的要求去北京学GRE，也是烦的很啊。
我觉得为了我的腰我觉得我最近可能要再买一把小一点的键盘了，在外地的话我肯定天天背着书包，87真的是太！沉！了！&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Poker(太丑)&lt;/li&gt;
  &lt;li&gt;Filco minila (赤)&lt;/li&gt;
  &lt;li&gt;HHKB (professional-2)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也就只能从后面两个选一个把，如果真买了的话我一定会在我的自留地装逼的恍恍惚惚。
当然你们如果看了这篇烂文并且有什么意见的话，可以在下面评论，
或者你觉得哪个键盘好一些也可以评论告诉我，如果采用的话我请你吃饭啊红红火火。&lt;/p&gt;

&lt;p&gt;最后祝看我吐槽破文章的人-身体健康，再见。&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Dec 2016 17:00:00 +0800</pubDate>
        <link>http://localhost:4000/OSU!-keyboard/</link>
        <guid isPermaLink="true">http://localhost:4000/OSU!-keyboard/</guid>
        
        <category>Daily</category>
        
        <category>OSU!</category>
        
        
        <category>SYH的自留地</category>
        
      </item>
    
      <item>
        <title>Ruby的集合遍历</title>
        <description>&lt;h2 id=&quot;ruby的遍历方法&quot;&gt;&lt;strong&gt;Ruby的遍历方法&lt;/strong&gt;&lt;/h2&gt; &lt;p&gt;因为最近经常需要用到集合的遍历，看完镐头书(Ruby Programming) 相关章节后总结下常见的方法。&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;each&lt;/em&gt;&lt;/strong&gt; 基本上来说就是处于取代了for的作用，当你需要迭代一个集合的时候 each都是可以的选择，而且each比for方便很多&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Do something &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; 和each的作用大概相同，最大的不同就是map会将处理后的结果返回， 省了temp一类的中间变量&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Return [2, 4, 6] &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Return ['A', 'B', 'C']&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;&lt;strong&gt;&lt;em&gt;select&lt;/em&gt;&lt;/strong&gt; 从前向后的迭代计算计算结果为true的元素，当作正向的filter&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span...</description>
        <pubDate>Sat, 10 Dec 2016 17:00:00 +0800</pubDate>
        <link>http://localhost:4000/Ruby-traversal/</link>
        <guid isPermaLink="true">http://localhost:4000/Ruby-traversal/</guid>
        
        <category>Ruby</category>
        
        
        <category>Ruby notes</category>
        
      </item>
    
  </channel>
</rss>
